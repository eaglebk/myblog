fn main() {
    let crew = vec![
        "Капитан Нова",
        "Инженер Спаркс",
        "Доктор Люмен",
        "Биолог Рост",
        "Пилот Вега",
        "Связист Хекс",
    ];

    // Попытка вызвать участника с индексом 99
    let who = crew[99]; // ❌ паника
    println!("На тренировку выходит: {}", who);
}
// ! **Результат: программа упадёт с паникой.**
// ! - Что произошло? В Rust доступ по индексу (`crew[99]`) проверяется на корректность. Если индекс вне диапазона, программа завершается **паникой**..
// ! - В отличие от C/C++, где можно случайно прочитать "левые байты" или сломать память Rust останавливает программу и не даёт ей работать некорректно.

// --- 

fn main() {
    let crew = vec![
        "Капитан Нова",
        "Инженер Спаркс",
        "Доктор Люмен",
        "Биолог Рост",
        "Пилот Вега",
        "Связист Хекс",
    ];

    match crew.get(99) {
        Some(name) => println!("На тренировку выходит: {}", name),
        None => println!("Ошибка: участника с таким номером не существует."),
    }
}
// ! **Исправление капитана — безопасный доступ**
// ! - Разбор:
// ! - [] возвращает ссылку &T, но вызывает панику, если индекс неверный.
// ! - `.get(index)` возвращает `Option<&T>`: `Some(&T)` — элемент найден, `None` — индекс за пределами.
